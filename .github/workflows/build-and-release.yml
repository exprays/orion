name: Build and Release

on:
  push:
    tags:
      - 'v*' # This will trigger on any tag starting with 'v'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22.4'

    - name: Build for Windows, Linux, and macOS
      run: |
        # Build hunter
        GOOS=windows GOARCH=amd64 go build -o hunter.exe cmd/hunter/hunter.go
        GOOS=linux GOARCH=amd64 go build -o hunter-linux cmd/hunter/hunter.go
        GOOS=darwin GOARCH=amd64 go build -o hunter-macos cmd/hunter/hunter.go
        
        # Build orion
        GOOS=windows GOARCH=amd64 go build -o orion.exe cmd/server/orion.go
        GOOS=linux GOARCH=amd64 go build -o orion-linux cmd/server/orion.go
        GOOS=darwin GOARCH=amd64 go build -o orion-macos cmd/server/orion.go

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }} # This token is provided by GitHub Actions
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Create Release and Upload Assets
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      run: |
        assets=(
          "hunter.exe"
          "hunter-linux"
          "hunter-macos"
          "orion.exe"
          "orion-linux"
          "orion-macos"
        )
          
        # Check if release exists
        if gh release view ${{ github.ref_name }} &>/dev/null; then
          echo "Release ${{ github.ref_name }} already exists. Updating..."
          gh release edit ${{ github.ref_name }} \
            --title "Release ${{ github.ref_name }}" \
            --notes "Release ${{ github.ref_name }} (updated)"
        else
          echo "Creating new release ${{ github.ref_name }}..."
          gh release create ${{ github.ref_name }} \
            --title "Release ${{ github.ref_name }}" \
            --notes "Release ${{ github.ref_name }}"
        fi
        
        # Upload assets
        for asset in "${assets[@]}"; do
          if [ -f "$asset" ]; then
            gh release upload ${{ github.ref_name }} "$asset" --clobber
          else
            echo "Warning: Asset $asset not found"
          fi
        done